Test Harness  for vsdcell_nand3_1x
.include 'sky130nm.lib' 
.include 'custom_stdcell/nand3_1x/nand3_1x.spice'
X1 A B C VGND VPWR Y vsdcell_nand3_1x
* Power Supplies
VVPWR VPWR 0 DC 1.8
VVGND VGND 0 DC 0
* Signal Supplies
Vc c 0 PULSE(0 1.8 0 0.01n 0.01n 50ns 100ns)
Va a 0 DC 1.8
Vb b 0 DC 1.8
* CLoad 
CLoad y 0 0.005p
* Control Generations
.control

        let run  = 0
        foreach in_delay 0.01n 0.023n 0.0531329n 0.122474n 0.282311n 0.650743n 1.5n

    * Initiating Text Files in folder data
    echo "input_delay:$in_delay" >> custom_stdcell/nand3_1x/data/timing/input_delay.txt
    echo "input_delay:$in_delay" >> custom_stdcell/nand3_1x/data/timing/cell_fall.txt
    echo "input_delay:$in_delay" >> custom_stdcell/nand3_1x/data/timing/cell_rise.txt
    echo "input_delay:$in_delay" >> custom_stdcell/nand3_1x/data/timing/fall_transition.txt
    echo "input_delay:$in_delay" >> custom_stdcell/nand3_1x/data/timing/rise_transition.txt

    * 1.666 to match the slew rate
    let actual_rtime = $in_delay*1.666   
   
    * Input Vector - Load Cap values(index2)
    foreach out_cap 0.0005p 0.0012105800p 0.002931p 0.00709641p 0.0171815p 0.0415991p 0.100718p
         reset
        
        * Changing the V2 Supply Rise time as per the Input Rise Time vector
        alter @Vc[pulse] = [ 0 1.8 0 $&actual_rtime $&actual_rtime 50ns 100ns ]
        
        * Changing the C1 value as per the foreach list
        alter CLOAD $out_cap
        
        tran 0.01n 300ns
        run

        reset
        * Verification of INPUT RISE TIME
        meas tran ts1 when v(c)=1.44 RISE=1 
        meas tran ts2 when v(c)=0.36 RISE=1
        meas tran ts3 when v(c)=1.44 FALL=1 
        meas tran ts4 when v(c)=0.36 FALL=1
        let RISE_IN_SLEW = (ts1-ts2)/1e-09
        let FALL_IN_SLEW = (ts4-ts3)/1e-09
        echo "actual_rise_slew:$&RISE_IN_SLEW" >> custom_stdcell/nand3_1x/data/timing/input_delay.txt
        echo "actual_fall_slew:$&FALL_IN_SLEW" >> custom_stdcell/nand3_1x/data/timing/input_delay.txt


        print run
        * Measuring Cell Fall Time @ 50% of VDD(1.8V) 
        meas tran tinfall when v(c)=0.9 FALL=1 
        meas tran tofall when v(Y)=0.9 FALL=1
        let cfall = (tofall-tinfall)/1e-09
        if abs(cfall)>20
            meas tran tinfall when v(c)=0.9 Rise=1 
            meas tran tofall when v(Y)=0.9 FALL=1
            let cfall = abs(tofall-tinfall)/1e-09
        end
        print cfall
        echo "out_cap:$out_cap:cell_fall:$&cfall" >> custom_stdcell/nand3_1x/data/timing/cell_fall.txt

        * Measuring Cell Rise Time @ 50% of VDD(1.8V) 
        meas tran tinrise when v(c)=0.9 RISE=1 
        meas tran torise when v(Y)=0.9 RISE=1
        let crise = (torise-tinrise)/1e-09
        if abs(crise)>20
            meas tran tinrise when v(c)=0.9 FALL=1 
            meas tran torise when v(Y)=0.9 RISE=1
            let crise = abs(tinrise-torise)/1e-09
        end
        print crise
        echo "out_cap:$out_cap:cell_rise:$&crise" >> custom_stdcell/nand3_1x/data/timing/cell_rise.txt

        * Measuring Fall Transion Time @ 80-20% of VDD(1.8V) 
        meas tran ft1 when v(Y)=1.44 FALL=2 
        meas tran ft2 when v(Y)=0.36 FALL=2
        let fall_tran = (ft2-ft1)/1e-09
        print fall_tran
        echo "out_cap:$out_cap:fall_transition:$&fall_tran" >> custom_stdcell/nand3_1x/data/timing/fall_transition.txt
        
        * Measuring Rise Transion Time @ 20-80% of VDD(1.8V) 
        meas tran rt1 when v(Y)=1.44 RISE=2 
        meas tran rt2 when v(Y)=0.36 RISE=2
        let rise_tran = ((rt1-rt2)/1e-09)
        print rise_tran
        echo "out_cap:$out_cap:rise_transition:$&rise_tran" >> custom_stdcell/nand3_1x/data/timing/rise_transition.txt
        let run = run + 1
        * plot a y
    end
    


end
rusage
quit
.endc